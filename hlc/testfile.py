from HLCAPP.coreclasses.investigation_obj import InvestigationObj
from HLCAPP.dbserver.flask_app import dbsession
from HLCAPP.dbserver.HLC_ORM import *
from HLCAPP.core_services.service_statics import *
from HLCAPP.common_module.group_data_formatter import GroupDataFormatter
# -*- coding: utf-8 -*-
class TestFile:

    def __init__(self):
        self.dbsession = dbsession

    # def get_alll_investigation(self):
    #     select_investigation_columns = ['investigation_id', 'investigation_type', 'investigation_name',
    #                                     'investigation_status', 'investigation_subtype','investigation2parent']
    #     alias_investigation_columns = ['investigation_id', 'investigation_type', 'investigation_name',
    #                                    'investigation_status', 'investigation_subtype','investigation2parent']
    #     table_columns = map(lambda x: getattr(InvestigationsView, x), select_investigation_columns)
    #     result = self.dbsession.query(*table_columns).filter(InvestigationsView.investigation_status == STATUS_ACTIVE). \
    #         filter(InvestigationsView.investigation_subtype == INVESTIGATION_SUBTYPE_PATHOLOGY).all()
    #     final_recs = orm_to_dict_selected_with_col_aliases(result, table_columns, alias_investigation_columns)
    #
    #     p_col = ['investigation_id','investigation_name']
    #     c_col = ['investigation_id', 'investigation_name','investigation2parent','investigation_subtype']
    #     gdf = GroupDataFormatter('investigation_id','investigation2parent',p_col,c_col)
    #     return final_recs
    #     notes_tree = gdf.hierarchical_format(final_recs)
    #     return {"errCode": 0, "msg": notes_tree}
    #
    #
    # #======================
    # def get_alll_producthouse(self):
    #     parent_cols = ['product_house_id', 'product_house_name', 'product_house_status']
    #     child_cols = ['product_id', 'product_name', 'product_status']
    #     result = self.dbsession.query(ProductHouseView).filter(ProductHouseView.product_house_status == STATUS_ACTIVE).all()
    #     final_recs = [orm_to_dict_v2(item) for item in result] if result else []
    #     # notes_tree = self.format_data(final_recs)
    #     gdf = GroupDataFormatter('product_id', 'product_house_id', parent_cols, child_cols)
    #     notes_tree = gdf.parent_child_level1(final_recs)
    #     return {"errCode": 0, "msg": notes_tree}
    #
    # def format_data(self,data):
    #     records = {}
    #     parent_cols = ['product_house_id','product_house_name','product_house_status']
    #     child_cols = ['product_id', 'product_name', 'product_status']
    #     for item in data:
    #         temp = {}
    #         if item['product_house_id'] in records:
    #             data = records[item['product_house_id']]
    #             data['children'].append(self.select_columns(item, child_cols))
    #         else:
    #             temp = self.select_columns(item,parent_cols)
    #             temp['children'] = [ self.select_columns(item, child_cols)] if item['product_id'] > 0 else []
    #             records[item['product_house_id']] = temp
    #
    #     return records.values()
    #
    # def select_columns(self, dict_item, select_columns):
    #     row = {}
    #     if not dict_item:
    #         return dict_item
    #     for key in dict_item.keys():
    #         if key in select_columns:
    #             row[key] = dict_item[key]
    #     return row

    def update_emailcontent(self):
        # coding: utf-8
        data = self.dbsession.query(EmailContent).filter(EmailContent.subject == 'complete_engagement_activity').first()
        data.content = {
    "body": "<html><div style='background-color: #73D0C8;font-size: 16px;'><div style='background-color: #fff;position: relative;width: 100%;min-height: 1px;padding-right: 15px;padding-left: 15px;flex: 0 0 33.333333%;max-width: 66.333333%;height: auto; margin: auto; display: flex'><div style='height:auto; width:90%;'><br><img src='https://storage.googleapis.com/hlc-bucket/RENMA1.png' alt='renla logo' style='height:auto; width:40%; margin: auto; display: flex;'><div style=' text-align: center; padding-left:10px'><b>Hi $first_name $last_name,</b></div><br><div style=' text-align: center; padding-left:10px'>Complete your next engagement activity for $plan_name<br><br>If this request was not generated by you, report it by contacting us at  info@myhealth360.co.za</div><br><div style=' text-align: center; padding-left:10px'>We look forward to seeing you return to the world of <a href='$ip_address'>engage.myhealth360.co.za</a> very soon!</div><br><div style=' text-align: center; padding-left:10px'>Yours in wellness,<br><b>Team My Health360</b></div></div></div></div><br><br><div style=' text-align: center; font-size: 16px;'>My Health Engage &#169; 2020 My Health Engage<br></html>",
    "subject": "Complete your next engagement activity for $plan_name",
    "mail_body_text": "\nHi $first_name $last_name,\n Complete your next engagement activity for $plan_name"
}




        self.dbsession.commit()



if __name__ == "__main__":
    obj = TestFile()
    res = obj.update_emailcontent()
    print(res)
